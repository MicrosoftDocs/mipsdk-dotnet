<Type Name="IFileHandler" FullName="Microsoft.InformationProtection.File.IFileHandler">
  <TypeSignature Language="C#" Value="public interface IFileHandler : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFileHandler implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.InformationProtection.File.IFileHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFileHandler&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type IFileHandler = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mip_dotnet_api</AssemblyName>
    <AssemblyVersion>1.1.210.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.InformationProtection</AssemblyName>
    <AssemblyVersion>1.2.153.0</AssemblyVersion>
    <AssemblyVersion>1.3.191.0</AssemblyVersion>
    <AssemblyVersion>1.6.113.0</AssemblyVersion>
    <AssemblyVersion>1.6.152.0</AssemblyVersion>
    <AssemblyVersion>1.7.133.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Interface for all file handling functions.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ClassifyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.ObjectModel.ReadOnlyCollection&lt;Microsoft.InformationProtection.Policy.Actions.Action&gt;&gt; ClassifyAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class Microsoft.InformationProtection.Policy.Actions.Action&gt;&gt; ClassifyAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.ClassifyAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ClassifyAsync () As Task(Of ReadOnlyCollection(Of Action))" />
      <MemberSignature Language="F#" Value="abstract member ClassifyAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Collections.ObjectModel.ReadOnlyCollection&lt;Microsoft.InformationProtection.Policy.Actions.Action&gt;&gt;" Usage="iFileHandler.ClassifyAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mip_dotnet_api</AssemblyName>
        <AssemblyVersion>1.1.210.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.2.153.0</AssemblyVersion>
        <AssemblyVersion>1.3.191.0</AssemblyVersion>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.ObjectModel.ReadOnlyCollection&lt;Microsoft.InformationProtection.Policy.Actions.Action&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Executes the rules in the engine based on the provided state and returns the list of actions to be executed.
            </summary>
        <returns>list of automatic and recommended actions that should be applied on the content.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; CommitAsync (System.IO.Stream outputStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CommitAsync(class System.IO.Stream outputStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.CommitAsync(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function CommitAsync (outputStream As Stream) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CommitAsync : System.IO.Stream -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iFileHandler.CommitAsync outputStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mip_dotnet_api</AssemblyName>
        <AssemblyVersion>1.1.210.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.2.153.0</AssemblyVersion>
        <AssemblyVersion>1.3.191.0</AssemblyVersion>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="outputStream">The stream to write the changes to.</param>
        <summary>
            Writes the changes to a file stream.
            </summary>
        <returns>A task that represents the asynchronous commit operation. The value of the <c>TResult</c> parameter contains the whether there were changes to commit to the output file.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; CommitAsync (string outputFilePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CommitAsync(string outputFilePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.CommitAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CommitAsync (outputFilePath As String) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CommitAsync : string -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iFileHandler.CommitAsync outputFilePath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mip_dotnet_api</AssemblyName>
        <AssemblyVersion>1.1.210.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.2.153.0</AssemblyVersion>
        <AssemblyVersion>1.3.191.0</AssemblyVersion>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFilePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outputFilePath">The file to write the changes to.</param>
        <summary>
            Writes the changes to the file.
            </summary>
        <returns>A task that represents the asynchronous commit operation. The value of the <c>TResult</c> parameter contains the whether there were changes to commit to the output file.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteLabel">
      <MemberSignature Language="C#" Value="public void DeleteLabel (Microsoft.InformationProtection.File.LabelingOptions labelingOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteLabel(class Microsoft.InformationProtection.File.LabelingOptions labelingOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.DeleteLabel(Microsoft.InformationProtection.File.LabelingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteLabel (labelingOptions As LabelingOptions)" />
      <MemberSignature Language="F#" Value="abstract member DeleteLabel : Microsoft.InformationProtection.File.LabelingOptions -&gt; unit" Usage="iFileHandler.DeleteLabel labelingOptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mip_dotnet_api</AssemblyName>
        <AssemblyVersion>1.1.210.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.2.153.0</AssemblyVersion>
        <AssemblyVersion>1.3.191.0</AssemblyVersion>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labelingOptions" Type="Microsoft.InformationProtection.File.LabelingOptions" />
      </Parameters>
      <Docs>
        <param name="labelingOptions">To be added.</param>
        <summary>
            Deletes the sensitivity label from the file.
            </summary>
        <remarks>Changes will not be written to the file until CommitAsync will be called.
            <para>Will throw a JustificationRequiredError when setting the label
            requires the operation to be justified (via the labelingOptions parameter).</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecryptedTemporaryFileAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetDecryptedTemporaryFileAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetDecryptedTemporaryFileAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.GetDecryptedTemporaryFileAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDecryptedTemporaryFileAsync () As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetDecryptedTemporaryFileAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="iFileHandler.GetDecryptedTemporaryFileAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mip_dotnet_api</AssemblyName>
        <AssemblyVersion>1.1.210.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.2.153.0</AssemblyVersion>
        <AssemblyVersion>1.3.191.0</AssemblyVersion>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Create a decrypted temporary file
            </summary>
        <returns>The decrypted file file path</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">If the file is not protected</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDecryptedTemporaryStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetDecryptedTemporaryStreamAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetDecryptedTemporaryStreamAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.GetDecryptedTemporaryStreamAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDecryptedTemporaryStreamAsync () As Task(Of Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetDecryptedTemporaryStreamAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="iFileHandler.GetDecryptedTemporaryStreamAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.3.191.0</AssemblyVersion>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Create a decrypted temporary stream
            </summary>
        <returns>Reference to temporary stream</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">If the file is not protected</exception>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; GetProperties (uint version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; GetProperties(unsigned int32 version) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.GetProperties(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties (version As UInteger) As ReadOnlyCollection(Of KeyValuePair(Of String, String))" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : uint32 -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;string, string&gt;&gt;" Usage="iFileHandler.GetProperties version" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="System.UInt32" Index="0" FrameworkAlternate="mipsdk-dotnet-1.7" />
      </Parameters>
      <Docs>
        <param name="version">The version of the properties.</param>
        <summary>
            Retrieve the properties from the file.
            </summary>
        <returns>The properties of the file.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InspectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.InformationProtection.File.IFileInspector&gt; InspectAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.InformationProtection.File.IFileInspector&gt; InspectAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.InspectAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function InspectAsync () As Task(Of IFileInspector)" />
      <MemberSignature Language="F#" Value="abstract member InspectAsync : unit -&gt; System.Threading.Tasks.Task&lt;Microsoft.InformationProtection.File.IFileInspector&gt;" Usage="iFileHandler.InspectAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.InformationProtection.File.IFileInspector&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Create file inspector for the object if possible, useful when trying to inspect (e.g.reading body) supported formats.
            </summary>
        <returns>A task that represents the asynchronous File inspect operation. The value of the <c>TResult</c> parameter contains the inspector.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsModified">
      <MemberSignature Language="C#" Value="public bool IsModified ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsModified() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.IsModified" />
      <MemberSignature Language="VB.NET" Value="Public Function IsModified () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsModified : unit -&gt; bool" Usage="iFileHandler.IsModified " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>		
            Finds if there are changes to apply on the file.		
            </summary>
        <returns>Whether there are changes to commit to the file</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public Microsoft.InformationProtection.ContentLabel Label { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.InformationProtection.ContentLabel Label" />
      <MemberSignature Language="DocId" Value="P:Microsoft.InformationProtection.File.IFileHandler.Label" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Label As ContentLabel" />
      <MemberSignature Language="F#" Value="member this.Label : Microsoft.InformationProtection.ContentLabel" Usage="Microsoft.InformationProtection.File.IFileHandler.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mip_dotnet_api</AssemblyName>
        <AssemblyVersion>1.1.210.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.2.153.0</AssemblyVersion>
        <AssemblyVersion>1.3.191.0</AssemblyVersion>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.InformationProtection.ContentLabel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Retrieve the sensitivity label from the file.
            </summary>
        <value>The sensitivity label from the file.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyCommitSuccessful">
      <MemberSignature Language="C#" Value="public void NotifyCommitSuccessful (string actualFilePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyCommitSuccessful(string actualFilePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.NotifyCommitSuccessful(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub NotifyCommitSuccessful (actualFilePath As String)" />
      <MemberSignature Language="F#" Value="abstract member NotifyCommitSuccessful : string -&gt; unit" Usage="iFileHandler.NotifyCommitSuccessful actualFilePath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mip_dotnet_api</AssemblyName>
        <AssemblyVersion>1.1.210.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.2.153.0</AssemblyVersion>
        <AssemblyVersion>1.3.191.0</AssemblyVersion>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actualFilePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actualFilePath">The actual file path for the output file.</param>
        <summary>
             To be called when the changes have been committed to disk
             </summary>
        <remarks>Fires an Audit event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputFileName">
      <MemberSignature Language="C#" Value="public string OutputFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OutputFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.InformationProtection.File.IFileHandler.OutputFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputFileName As String" />
      <MemberSignature Language="F#" Value="member this.OutputFileName : string" Usage="Microsoft.InformationProtection.File.IFileHandler.OutputFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mip_dotnet_api</AssemblyName>
        <AssemblyVersion>1.1.210.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.2.153.0</AssemblyVersion>
        <AssemblyVersion>1.3.191.0</AssemblyVersion>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Calculates the output file name and extension based on the original file name and the accumulated changes.
            </summary>
        <value>The file name under which changes would be saved.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Protection">
      <MemberSignature Language="C#" Value="public Microsoft.InformationProtection.Protection.IProtectionHandler Protection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.InformationProtection.Protection.IProtectionHandler Protection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.InformationProtection.File.IFileHandler.Protection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Protection As IProtectionHandler" />
      <MemberSignature Language="F#" Value="member this.Protection : Microsoft.InformationProtection.Protection.IProtectionHandler" Usage="Microsoft.InformationProtection.File.IFileHandler.Protection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mip_dotnet_api</AssemblyName>
        <AssemblyVersion>1.1.210.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.2.153.0</AssemblyVersion>
        <AssemblyVersion>1.3.191.0</AssemblyVersion>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.InformationProtection.Protection.IProtectionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Starts retrieving the protection handler from the file.
            </summary>
        <value>The protection handler.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterContentForTrackingAndRevocationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RegisterContentForTrackingAndRevocationAsync (bool isOwnerNotificationEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RegisterContentForTrackingAndRevocationAsync(bool isOwnerNotificationEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.RegisterContentForTrackingAndRevocationAsync(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function RegisterContentForTrackingAndRevocationAsync (isOwnerNotificationEnabled As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member RegisterContentForTrackingAndRevocationAsync : bool -&gt; System.Threading.Tasks.Task" Usage="iFileHandler.RegisterContentForTrackingAndRevocationAsync isOwnerNotificationEnabled" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isOwnerNotificationEnabled" Type="System.Boolean" Index="0" FrameworkAlternate="mipsdk-dotnet-1.7" />
      </Parameters>
      <Docs>
        <param name="isOwnerNotificationEnabled">Set to true to notify the owner via email whenever the document is decrypted, or false to not send the notification.</param>
        <summary>
            Register a protected document for tracking and revocation.
            </summary>
        <returns>A task that represents the asynchronous create operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProtection">
      <MemberSignature Language="C#" Value="public void RemoveProtection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveProtection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.RemoveProtection" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveProtection ()" />
      <MemberSignature Language="F#" Value="abstract member RemoveProtection : unit -&gt; unit" Usage="iFileHandler.RemoveProtection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mip_dotnet_api</AssemblyName>
        <AssemblyVersion>1.1.210.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.2.153.0</AssemblyVersion>
        <AssemblyVersion>1.3.191.0</AssemblyVersion>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Removes protection from the file. 
            If the original file format does not support labeling, 
              the label will be lost when protection is removed. 
            When the native format supports labeling, the label metadata is maintained.
            </summary>
        <remarks>Changes will not be written to the file until CommitAsync will be called.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RevokeContentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RevokeContentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RevokeContentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.RevokeContentAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function RevokeContentAsync () As Task" />
      <MemberSignature Language="F#" Value="abstract member RevokeContentAsync : unit -&gt; System.Threading.Tasks.Task" Usage="iFileHandler.RevokeContentAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Perform revocation for protected content.
            </summary>
        <returns>A task that represents the asynchronous create operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLabel">
      <MemberSignature Language="C#" Value="public void SetLabel (Microsoft.InformationProtection.Label label, Microsoft.InformationProtection.File.LabelingOptions labelingOptions, Microsoft.InformationProtection.File.ProtectionSettings protectionSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLabel(class Microsoft.InformationProtection.Label label, class Microsoft.InformationProtection.File.LabelingOptions labelingOptions, class Microsoft.InformationProtection.File.ProtectionSettings protectionSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.SetLabel(Microsoft.InformationProtection.Label,Microsoft.InformationProtection.File.LabelingOptions,Microsoft.InformationProtection.File.ProtectionSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLabel (label As Label, labelingOptions As LabelingOptions, protectionSettings As ProtectionSettings)" />
      <MemberSignature Language="F#" Value="abstract member SetLabel : Microsoft.InformationProtection.Label * Microsoft.InformationProtection.File.LabelingOptions * Microsoft.InformationProtection.File.ProtectionSettings -&gt; unit" Usage="iFileHandler.SetLabel (label, labelingOptions, protectionSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.3.191.0</AssemblyVersion>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.InformationProtection.Label" />
        <Parameter Name="labelingOptions" Type="Microsoft.InformationProtection.File.LabelingOptions" />
        <Parameter Name="protectionSettings" Type="Microsoft.InformationProtection.File.ProtectionSettings" />
      </Parameters>
      <Docs>
        <param name="label">To be added.</param>
        <param name="labelingOptions">To be added.</param>
        <param name="protectionSettings">To be added.</param>
        <summary>
            Sets the sensitivity label to the file.
            </summary>
        <remarks>
            Changes will not be written to the file until CommitAsync will be called.
            <para>Will throw a JustificationRequiredError when setting the label
            requires the operation to be justified (via the labelingOptions parameter).</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProtection">
      <MemberSignature Language="C#" Value="public void SetProtection (Microsoft.InformationProtection.Protection.IProtectionHandler protectionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetProtection(class Microsoft.InformationProtection.Protection.IProtectionHandler protectionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.SetProtection(Microsoft.InformationProtection.Protection.IProtectionHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetProtection (protectionHandler As IProtectionHandler)" />
      <MemberSignature Language="F#" Value="abstract member SetProtection : Microsoft.InformationProtection.Protection.IProtectionHandler -&gt; unit" Usage="iFileHandler.SetProtection protectionHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protectionHandler" Type="Microsoft.InformationProtection.Protection.IProtectionHandler" />
      </Parameters>
      <Docs>
        <param name="protectionHandler">To be added.</param>
        <summary>
            Sets custom permissions to the file.
            </summary>
        <remarks>Changes will not be written to the file until CommitAsync will be called.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProtection">
      <MemberSignature Language="C#" Value="public void SetProtection (Microsoft.InformationProtection.ProtectionDescriptor protectionDescriptor, Microsoft.InformationProtection.File.ProtectionSettings protectionSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetProtection(class Microsoft.InformationProtection.ProtectionDescriptor protectionDescriptor, class Microsoft.InformationProtection.File.ProtectionSettings protectionSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.InformationProtection.File.IFileHandler.SetProtection(Microsoft.InformationProtection.ProtectionDescriptor,Microsoft.InformationProtection.File.ProtectionSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetProtection (protectionDescriptor As ProtectionDescriptor, protectionSettings As ProtectionSettings)" />
      <MemberSignature Language="F#" Value="abstract member SetProtection : Microsoft.InformationProtection.ProtectionDescriptor * Microsoft.InformationProtection.File.ProtectionSettings -&gt; unit" Usage="iFileHandler.SetProtection (protectionDescriptor, protectionSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.InformationProtection</AssemblyName>
        <AssemblyVersion>1.3.191.0</AssemblyVersion>
        <AssemblyVersion>1.6.113.0</AssemblyVersion>
        <AssemblyVersion>1.6.152.0</AssemblyVersion>
        <AssemblyVersion>1.7.133.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protectionDescriptor" Type="Microsoft.InformationProtection.ProtectionDescriptor" />
        <Parameter Name="protectionSettings" Type="Microsoft.InformationProtection.File.ProtectionSettings" />
      </Parameters>
      <Docs>
        <param name="protectionDescriptor">To be added.</param>
        <param name="protectionSettings">To be added.</param>
        <summary>
            Sets custom permissions to the file.
            </summary>
        <remarks>Changes will not be written to the file until CommitAsync will be called.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
